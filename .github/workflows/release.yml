name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/tmdb-mcp

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Release ${{ github.ref_name }}

            üê≥ Docker Images:
            - `ghcr.io/${{ github.repository }}:latest`
            - `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`

            üì¶ Binary Downloads:
            - Linux (amd64): `tmdb-mcp-linux-amd64.tar.gz`
            - Linux (arm64): `tmdb-mcp-linux-arm64.tar.gz`
            - macOS (amd64): `tmdb-mcp-darwin-amd64.tar.gz`
            - macOS (arm64): `tmdb-mcp-darwin-arm64.tar.gz`
            - Windows (amd64): `tmdb-mcp-windows-amd64.zip`

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          output_name="tmdb-mcp-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          go build -ldflags="-s -w" -o "bin/${output_name}" ./cmd/tmdb-mcp

      - name: Create archive
        shell: bash
        run: |
          cd bin
          if [ "${{ matrix.goos }}" = "windows" ]; then
            7z a "../tmdb-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.zip" *
          else
            tar -czf "../tmdb-mcp-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" *
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.goos == 'windows' && format('tmdb-mcp-{0}-{1}.zip', matrix.goos, matrix.goarch) || format('tmdb-mcp-{0}-{1}.tar.gz', matrix.goos, matrix.goarch) }}
          asset_name: ${{ matrix.goos == 'windows' && format('tmdb-mcp-{0}-{1}.zip', matrix.goos, matrix.goarch) || format('tmdb-mcp-{0}-{1}.tar.gz', matrix.goos, matrix.goarch) }}
          asset_content_type: application/octet-stream

  build-and-push-docker:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max